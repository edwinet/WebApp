@{
    // View
    View = this;

    // Check action result
    if (rolesList.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!rolesList.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
@if (!rolesList.IsExport()) {
<script>
var currentTable = @Html.Raw(ConvertToJson(rolesList.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { roles: currentTable } });
var currentPageID = ew.PAGE_ID = "list";
var currentForm;
var @(rolesList.FormName);
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("@(rolesList.FormName)")
        .setPageId("list")
        .setSubmitWithFetch(@(rolesList.UseAjaxActions ? "true" : "false"))
        .setFormKeyCountName("@(rolesList.FormKeyCountName)")
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
}
@if (!rolesList.IsExport()) {
<div class="btn-toolbar ew-toolbar">
@if (rolesList.TotalRecords > 0 && rolesList.ExportOptions.Visible) {
    rolesList.ExportOptions.Render("body");
}
@if (rolesList.ImportOptions.Visible) {
    rolesList.ImportOptions.Render("body");
}
</div>
}
@if (!rolesList.IsModal) {
}
@rolesList.ShowPageHeader()
@rolesList.ShowMessages()
<main class="list @(rolesList.TotalRecords == 0 && !rolesList.IsAdd ? " ew-no-record" : "")">
<div id="ew-list">
@if (rolesList.TotalRecords > 0 || !Empty(rolesList.CurrentAction)) {
<div class="card ew-card ew-grid@(rolesList.IsAddOrEdit ? " ew-grid-add-edit" : "") @(rolesList.TableGridClass)">
@if (!rolesList.IsExport()) {
<div class="card-header ew-grid-upper-panel">
@if (!rolesList.IsGridAdd && !(rolesList.IsGridEdit && rolesList.ModalGridEdit) && !rolesList.IsMultiEdit) {
@Html.Raw(rolesList.Pager.Render())
}
<div class="ew-list-other-options">
@rolesList.OtherOptions.RenderBody()
</div>
</div>
}
<form name="@(rolesList.FormName)" id="@(rolesList.FormName)" class="ew-form ew-list-form" action="@AppPath(rolesList.PageName)" method="post" novalidate autocomplete="off">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
@if (rolesList.IsModal) {
<input type="hidden" name="modal" value="1">
}
<div id="gmp_roles" class="card-body ew-grid-middle-panel @(rolesList.TableContainerClass)" style="@(rolesList.TableContainerStyle)">
@if (rolesList.TotalRecords > 0 || rolesList.IsGridEdit || rolesList.IsMultiEdit) {
<table id="tbl_roleslist" class="@(rolesList.TableClass)"><!-- .ew-table -->
<thead>
    <tr class="ew-table-header">
@{
    // Header row
    rolesList.RowType = RowType.Header;

    // Render list options
    await rolesList.RenderListOptions();
}
@* Render list options (header, left) *@
@rolesList.ListOptions.RenderHeader("left")
@if (rolesList.id.Visible) { // rolesList.id.Visible (begin)
        <th data-name="id" class="@(rolesList.id.HeaderCellClass)"><div id="elh_roles_id" class="roles_id">@Html.Raw(rolesList.RenderFieldHeader(rolesList.id))</div></th>
} @* rolesList.id.Visible (end) *@
@if (rolesList.role_name.Visible) { // rolesList.role_name.Visible (begin)
        <th data-name="role_name" class="@(rolesList.role_name.HeaderCellClass)"><div id="elh_roles_role_name" class="roles_role_name">@Html.Raw(rolesList.RenderFieldHeader(rolesList.role_name))</div></th>
} @* rolesList.role_name.Visible (end) *@
@if (rolesList.description.Visible) { // rolesList.description.Visible (begin)
        <th data-name="description" class="@(rolesList.description.HeaderCellClass)"><div id="elh_roles_description" class="roles_description">@Html.Raw(rolesList.RenderFieldHeader(rolesList.description))</div></th>
} @* rolesList.description.Visible (end) *@
@if (rolesList._type.Visible) { // rolesList._type.Visible (begin)
        <th data-name="_type" class="@(rolesList._type.HeaderCellClass)"><div id="elh_roles__type" class="roles__type">@Html.Raw(rolesList.RenderFieldHeader(rolesList._type))</div></th>
} @* rolesList._type.Visible (end) *@
@* Render list options (header, right) *@
@rolesList.ListOptions.RenderHeader("right")
    </tr>
</thead>
<tbody data-page="@(rolesList.PageNumber)">
@{
    await rolesList.SetupGrid();
    bool eof = rolesList.Recordset == null; // DN
}
@while (rolesList.RecordCount < rolesList.StopRecord || SameString(rolesList.RowIndex, "$rowindex$")) { // Begin While
    if (!eof && !SameString(rolesList.RowIndex, "$rowindex$") &&
        (!rolesList.IsGridAdd || rolesList.CurrentMode == "copy") &&
        (!((rolesList.IsCopy || rolesList.IsAdd) && rolesList.RowIndex is int rowIndex && rowIndex == 0))) // DN
        eof = !await rolesList.Recordset.ReadAsync();
    rolesList.RecordCount++;
    if (rolesList.RecordCount >= rolesList.StartRecord) {
        await rolesList.SetupRow();
    <tr @Html.Raw(rolesList.RowAttributes)>
    @* Render list options (body, left) *@
    @rolesList.ListOptions.RenderBody("left", rolesList.RowCount)
    @if (rolesList.id.Visible) { // rolesList.id.Visible (begin)
        <td data-name="id" @Html.Raw(rolesList.id.CellAttributes)>
<span id="el@(rolesList.RowIndex == "$rowindex$" ? "$rowindex$" : rolesList.RowCount)_roles_id" class="el_roles_id">
<span @Html.Raw(rolesList.id.ViewAttributes)>
@Html.Raw(rolesList.id.GetViewValue())</span>
</span>
</td>
    } @* rolesList.id.Visible (end) *@
    @if (rolesList.role_name.Visible) { // rolesList.role_name.Visible (begin)
        <td data-name="role_name" @Html.Raw(rolesList.role_name.CellAttributes)>
<span id="el@(rolesList.RowIndex == "$rowindex$" ? "$rowindex$" : rolesList.RowCount)_roles_role_name" class="el_roles_role_name">
<span @Html.Raw(rolesList.role_name.ViewAttributes)>
@Html.Raw(rolesList.role_name.GetViewValue())</span>
</span>
</td>
    } @* rolesList.role_name.Visible (end) *@
    @if (rolesList.description.Visible) { // rolesList.description.Visible (begin)
        <td data-name="description" @Html.Raw(rolesList.description.CellAttributes)>
<span id="el@(rolesList.RowIndex == "$rowindex$" ? "$rowindex$" : rolesList.RowCount)_roles_description" class="el_roles_description">
<span @Html.Raw(rolesList.description.ViewAttributes)>
@Html.Raw(rolesList.description.GetViewValue())</span>
</span>
</td>
    } @* rolesList.description.Visible (end) *@
    @if (rolesList._type.Visible) { // rolesList._type.Visible (begin)
        <td data-name="_type" @Html.Raw(rolesList._type.CellAttributes)>
<span id="el@(rolesList.RowIndex == "$rowindex$" ? "$rowindex$" : rolesList.RowCount)_roles__type" class="el_roles__type">
<span @Html.Raw(rolesList._type.ViewAttributes)>
@Html.Raw(rolesList._type.GetViewValue())</span>
</span>
</td>
    } @* rolesList._type.Visible (end) *@
    @* Render list options (body, right) *@
    @rolesList.ListOptions.RenderBody("right", rolesList.RowCount)
    </tr>
    } @* End if *@

    // Reset for template row
    if (SameString(rolesList.RowIndex, "$rowindex$"))
        rolesList.RowIndex = 0;

    // Reset inline add/copy row
    if ((rolesList.IsCopy || rolesList.IsAdd) && rolesList.RowIndex is int rowIndex2 && rowIndex2 == 0)
        rolesList.RowIndex = 1;
} @* End While *@
</tbody>
</table><!-- /.ew-table -->
} @* End If TotalRecords > 0 *@
</div><!-- /.ew-grid-middle-panel -->
@if (Empty(rolesList.CurrentAction) && !rolesList.UseAjaxActions) {
<input type="hidden" name="action" id="action" value="">
}
</form><!-- /.ew-list-form -->
@{ rolesList.CloseRecordset(); }
@if (!rolesList.IsExport()) {
<div class="card-footer ew-grid-lower-panel">
@if (!rolesList.IsGridAdd && !(rolesList.IsGridEdit && rolesList.ModalGridEdit) && !rolesList.IsMultiEdit) {
@Html.Raw(rolesList.Pager.Render())
}
<div class="ew-list-other-options">
@rolesList.OtherOptions.RenderBody("bottom")
</div>
</div>
}
</div><!-- /.ew-grid -->
} else { // Show other options
<div class="ew-list-other-options">
@rolesList.OtherOptions.ForEach(opt => opt.ButtonClass = "").RenderBody()
</div>
}
</div>
</main>
@rolesList.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
@if (!rolesList.IsExport()) {
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("roles");
});
</script>
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
}
