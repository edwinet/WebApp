@{
    // View
    View = this;

    // Check action result
    if (register.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!register.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
var currentTable = @Html.Raw(ConvertToJson(register.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { users: currentTable } });
var currentPageID = ew.PAGE_ID = "register";
var currentForm;
var fregister;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fregister")
        .setPageId("register")

        // Add fields
        .setFields([

            ["id", [fields.id.visible && fields.id.required ? ew.Validators.required(fields.id.caption) : null], fields.id.isInvalid],
            ["first_name", [fields.first_name.visible && fields.first_name.required ? ew.Validators.required(fields.first_name.caption) : null], fields.first_name.isInvalid],
            ["last_name", [fields.last_name.visible && fields.last_name.required ? ew.Validators.required(fields.last_name.caption) : null], fields.last_name.isInvalid],
            ["_email", [fields._email.visible && fields._email.required ? ew.Validators.required(fields._email.caption) : null, ew.Validators.email], fields._email.isInvalid],
            ["_username", [fields._username.visible && fields._username.required ? ew.Validators.required(fields._username.caption) : null, ew.Validators.username(fields._username.raw)], fields._username.isInvalid],
            ["c_password", [ew.Validators.required(ew.language.phrase("ConfirmPassword")), ew.Validators.mismatchPassword], fields.password.isInvalid],
            ["password", [fields.password.visible && fields.password.required ? ew.Validators.required(fields.password.caption) : null, ew.Validators.passwordStrength, ew.Validators.password(fields.password.raw)], fields.password.isInvalid],
            ["role_id", [fields.role_id.visible && fields.role_id.required ? ew.Validators.required(fields.role_id.caption) : null], fields.role_id.isInvalid],
            ["created_at", [fields.created_at.visible && fields.created_at.required ? ew.Validators.required(fields.created_at.caption) : null], fields.created_at.isInvalid],
            ["updated_at", [fields.updated_at.visible && fields.updated_at.required ? ew.Validators.required(fields.updated_at.caption) : null], fields.updated_at.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
            "role_id": @Html.Raw(register.role_id.ToClientList(register)),
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@register.ShowPageHeader()
@register.ShowMessages()
<form name="fregister" id="fregister" class="@(register.FormClassName)" action="@AppPath(CurrentPageName())" method="post" novalidate autocomplete="off">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="modal" value="@(ConvertToInt(register.IsModal))">
<input type="hidden" name="action" id="action" value="insert">
<div class="ew-register-div"><!-- page* -->
@if (register.first_name.Visible) { // register.first_name.Visible (begin)
    <div id="r_first_name" @Html.Raw(register.first_name.RowAttributes)>
        <label id="elh_users_first_name" for="x_first_name" class="@(register.LeftColumnClass)">@Html.Raw(register.first_name.Caption)@Html.Raw(register.first_name.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(register.RightColumnClass)"><div @Html.Raw(register.first_name.CellAttributes)>
<span id="el_users_first_name">
<input type="@(register.first_name.InputTextType)" name="x_first_name" id="x_first_name" data-table="users" data-field="x_first_name" value="@Html.Raw(register.first_name.EditValue)" size="30" maxlength="255" placeholder="@Html.Raw(HtmlEncode(register.first_name.PlaceHolder))" data-format-pattern="@(register.first_name.FormatPattern)"@Html.Raw(register.first_name.EditAttributes) aria-describedby="x_first_name_help">
@Html.Raw(register.first_name.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(register.first_name.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* register.first_name.Visible (end) *@
@if (register.last_name.Visible) { // register.last_name.Visible (begin)
    <div id="r_last_name" @Html.Raw(register.last_name.RowAttributes)>
        <label id="elh_users_last_name" for="x_last_name" class="@(register.LeftColumnClass)">@Html.Raw(register.last_name.Caption)@Html.Raw(register.last_name.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(register.RightColumnClass)"><div @Html.Raw(register.last_name.CellAttributes)>
<span id="el_users_last_name">
<input type="@(register.last_name.InputTextType)" name="x_last_name" id="x_last_name" data-table="users" data-field="x_last_name" value="@Html.Raw(register.last_name.EditValue)" size="30" maxlength="255" placeholder="@Html.Raw(HtmlEncode(register.last_name.PlaceHolder))" data-format-pattern="@(register.last_name.FormatPattern)"@Html.Raw(register.last_name.EditAttributes) aria-describedby="x_last_name_help">
@Html.Raw(register.last_name.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(register.last_name.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* register.last_name.Visible (end) *@
@if (register._email.Visible) { // register._email.Visible (begin)
    <div id="r__email" @Html.Raw(register._email.RowAttributes)>
        <label id="elh_users__email" for="x__email" class="@(register.LeftColumnClass)">@Html.Raw(register._email.Caption)@Html.Raw(register._email.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(register.RightColumnClass)"><div @Html.Raw(register._email.CellAttributes)>
<span id="el_users__email">
<input type="@(register._email.InputTextType)" name="x__email" id="x__email" data-table="users" data-field="x__email" value="@Html.Raw(register._email.EditValue)" size="30" maxlength="255" placeholder="@Html.Raw(HtmlEncode(register._email.PlaceHolder))" data-format-pattern="@(register._email.FormatPattern)"@Html.Raw(register._email.EditAttributes) aria-describedby="x__email_help">
@Html.Raw(register._email.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(register._email.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* register._email.Visible (end) *@
@if (register._username.Visible) { // register._username.Visible (begin)
    <div id="r__username" @Html.Raw(register._username.RowAttributes)>
        <label id="elh_users__username" for="x__username" class="@(register.LeftColumnClass)">@Html.Raw(register._username.Caption)@Html.Raw(register._username.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(register.RightColumnClass)"><div @Html.Raw(register._username.CellAttributes)>
<span id="el_users__username">
<input type="@(register._username.InputTextType)" name="x__username" id="x__username" data-table="users" data-field="x__username" value="@Html.Raw(register._username.EditValue)" size="30" maxlength="255" placeholder="@Html.Raw(HtmlEncode(register._username.PlaceHolder))" data-format-pattern="@(register._username.FormatPattern)"@Html.Raw(register._username.EditAttributes) aria-describedby="x__username_help">
@Html.Raw(register._username.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(register._username.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* register._username.Visible (end) *@
@if (register.password.Visible) { // register.password.Visible (begin)
    <div id="r_password" @Html.Raw(register.password.RowAttributes)>
        <label id="elh_users_password" for="x_password" class="@(register.LeftColumnClass)">@Html.Raw(register.password.Caption)@Html.Raw(register.password.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(register.RightColumnClass)"><div @Html.Raw(register.password.CellAttributes)>
<span id="el_users_password">
<div class="input-group" id="ig_password">
                                <input type="password" autocomplete="new-password" data-password-strength="pst_password" data-table="users" data-field="x_password" name="x_password" id="x_password" size="30" maxlength="255" placeholder="@Html.Raw(register.password.PlaceHolder)" @Html.Raw(register.password.EditAttributes) aria-describedby="x_password_help">
    <button type="button" class="btn btn-default ew-toggle-password rounded-end" data-ew-action="password"><i class="fa-solid fa-eye"></i></button>
</div>
<div class="progress ew-password-strength-bar form-text mt-1 d-none" id="pst_password">
    <div class="progress-bar" role="progressbar"></div>
</div>
@Html.Raw(register.password.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(register.password.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* register.password.Visible (end) *@
@if (register.password.Visible) { // register.password.Visible (begin)
    <div id="r_c_password" class="row">
        <label id="elh_c_users_password" for="c_password" class="@(register.LeftColumnClass)">@Html.Raw(Language.Phrase("Confirm")) @Html.Raw(register.password.Caption)@Html.Raw(register.password.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(register.RightColumnClass)"><div @Html.Raw(register.password.CellAttributes)>
<span id="el_c_users_password">
<div class="input-group">
    <input type="password" name="c_password" id="c_password" autocomplete="new-password" data-field="c_password" size="30" maxlength="255" placeholder="@Html.Raw(register.password.PlaceHolder)"@Html.Raw(register.password.EditAttributes) aria-describedby="x_password_help">
    <button type="button" class="btn btn-default ew-toggle-password rounded-end" data-ew-action="password"><i class="fa-solid fa-eye"></i></button>
</div>
@Html.Raw(register.password.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(register.password.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* register.password.Visible (end) *@
</div><!-- /page* -->
@Html.Raw(register.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(register.OffsetColumnClass)"><!-- buttons offset -->
<button class="btn btn-primary ew-btn disabled enable-on-init" name="btn-action" id="btn-action" type="submit" form="fregister">@Html.Raw(Language.Phrase("RegisterBtn"))</button>
    </div><!-- /buttons offset -->
@Html.Raw(register.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
@register.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("users");
});
</script>
<script>
loadjs.ready("load", function() {
    // Write your startup script here
    // document.write("page loaded");
});
</script>
